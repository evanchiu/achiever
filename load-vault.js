#!/usr/bin/env node
import axios from "axios";
import { writeFile } from "node:fs/promises";
import { basename } from "node:path";
import { getVaultDb } from "./src/components/vault-db.json.js";

const DB_FILE = "src/components/vault-db.json.js";

/**
 * Load all objectives from the API
 */
async function loadObjectives() {
  // Get all objective ids
  const allResponse = await axios.get(
    "https://api.guildwars2.com/v2/wizardsvault/objectives",
  );

  // Get all objectives
  const objResponse = await axios.get(
    "https://api.guildwars2.com/v2/wizardsvault/objectives",
    { params: { ids: allResponse.data.join(",") } },
  );
  return objResponse.data;
}

/**
 * Shorten/simplify objective text
 */
function simplifyObjective(title, existing) {
  let simple = existing || "";
  if (
    title.match(/^Complete 5 Bounty Missions in (the )?(.*) or Group Events$/)
  ) {
    const match = title.match(
      /Complete 5 Bounty Missions in (the )?(.*) or Group Events/,
    );
    simple = `${match[2]} Bounty`;
  } else if (title.match(/Capture (\d+) (.*) in World vs. World/)) {
    const match = title.match(/Capture (\d+) (.*) in World vs. World/);
    simple = `WvW ${match[2]}`;
  } else if (title.match(/Complete 1 Event in (the )?(.*)/)) {
    const match = title.match(/Complete 1 Event in (the )?(.*)/);
    simple = `${match[2]} event`;
  } else if (title.match(/Complete the (.*) Jumping Puzzle/)) {
    const match = title.match(/Complete the (.*) Jumping Puzzle/);
    simple = `${match[1]} JP`;
  } else if (
    title.match(
      /Complete (the )?(.*) Meta-Event, Events in (.*), or Events in (.*)/,
    )
  ) {
    const match = title.match(
      /Complete (the )?(.*) Meta-Event, Events in (.*), or Events in (.*)/,
    );
    simple = `${match[2]} meta or ${match[3]}/${match[4]} events`;
  } else if (
    title.match(/Defeat the (.*) World Boss or Complete Events in (.*)/)
  ) {
    const match = title.match(
      /Defeat the (.*) World Boss or Complete Events in (.*)/,
    );
    simple = `${match[1]} or ${match[2]} events`;
  } else if (title.match(/View a Vista in (the )?(.*)/)) {
    const match = title.match(/View a Vista in (the )?(.*)/);
    simple = `${match[2]} vista`;
  } else if (title.match(/Defeat 10 .nemies in (the )?(.*)/)) {
    const match = title.match(/Defeat 10 .nemies in (the )?(.*)/);
    simple = `${match[2]} enemies`;
  } else if (title.match(/Defeat 100 (.*) or (.*)/)) {
    const match = title.match(/Defeat 100 (.*) or (.*)/);
    simple = `${match[1]} or ${match[2]}`;
  } else if (title.match(/(Harvest|Gather) (\d+) Resources with a (.*) (.*)/)) {
    const match = title.match(
      /(Harvest|Gather) (\d+) Resources with a (.*) (.*)/,
    );
    simple = match[4];
  } else if (title.match(/Salvage (\d+) Items/)) {
    simple = "Salvage";
  } else if (title.match(/Identify (\d+) Pieces of Unidentified Gear/)) {
    simple = "Identifications";
  } else if (title.match(/Complete (.*) Events$/)) {
    simple = `Events`;
  }
  return simple;
}

async function main() {
  // Load database and objectives
  const db = getVaultDb();
  console.log(`Loaded ${Object.keys(db).length} objectives from database`);
  const objectives = await loadObjectives();
  console.log(`Loaded ${objectives.length} objectives from API`);

  // Update database, overwriting objective details, and simplified succinct messages
  objectives.forEach((objective) => {
    const succinct = simplifyObjective(
      objective.title,
      db[objective.id]?.succinct,
    );
    db[objective.id] = Object.assign({}, db[objective.id], objective, {
      succinct,
    });
  });

  // Write database
  await writeFile(
    DB_FILE,
    `// This file is auto-re-generated by ${basename(process.argv[1])}\n` +
      "export function getVaultDb() { return" +
      JSON.stringify(db, undefined, 2) +
      "}",
  );
  console.log(`Wrote ${DB_FILE}`);
}

main();
